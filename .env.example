# Project Chimera - Environment Configuration Template
# 
# ðŸš¨ SECURITY CRITICAL ðŸš¨
# - Copy this file to .env and fill in secure values
# - NEVER commit .env to version control
# - Use strong, randomly generated passwords
# - Rotate credentials every 90 days minimum
#
# Password Generation:
#   Linux/Mac: openssl rand -base64 32
#   PowerShell: -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 32 | % {[char]$_})

# ============================================================================
# DATABASE CREDENTIALS - CRITICAL SECURITY
# ============================================================================

# PostgreSQL Configuration
POSTGRES_DB=chimera
POSTGRES_USER=chimera
# ðŸš¨ REQUIRED: Generate strong password (32+ characters)
# Example generation: openssl rand -base64 32
POSTGRES_PASSWORD=CHANGE_ME_TO_SECURE_PASSWORD_32_CHARS_MIN
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# ============================================================================
# MESSAGE QUEUE & CACHE - CRITICAL SECURITY
# ============================================================================

# Redis Configuration
# ðŸš¨ REQUIRED: Generate strong password (32+ characters)
REDIS_PASSWORD=CHANGE_ME_TO_SECURE_PASSWORD_32_CHARS_MIN
REDIS_HOST=redis
REDIS_PORT=6379

# ============================================================================
# OBJECT STORAGE (MinIO / S3-Compatible) - CRITICAL SECURITY
# ============================================================================

# MinIO Configuration
MINIO_ROOT_USER=chimera-admin
# ðŸš¨ REQUIRED: Generate strong password (32+ characters)
MINIO_ROOT_PASSWORD=CHANGE_ME_TO_SECURE_PASSWORD_32_CHARS_MIN
MINIO_ENDPOINT=minio:9000

# ========================================
# AGENT CONFIGURATION
# ========================================
AGENT_ID=intent_parser_v1
MODEL_PATH=/models/gemma-3-270m-q4.safetensors
ADAPTER_PATH=/models/adapter.safetensors
BATCH_WINDOW_MS=15
MAX_TOKENS=512
CUDA_VISIBLE_DEVICES=0

# ============================================================================
# EXTERNAL API KEYS (Optional - DO NOT COMMIT)
# ============================================================================

# OpenAI API (for fallback/comparison)
# OPENAI_API_KEY=sk-your-actual-api-key-here

# Hugging Face (for model access)
# HUGGINGFACE_TOKEN=hf_your-actual-token-here

# Google Cloud (for additional services)
# GOOGLE_CLOUD_API_KEY=your-actual-api-key-here

# GitHub (for repository operations)
# GITHUB_TOKEN=ghp_your-actual-token-here

# Docker Hub (for container registry)
# DOCKER_USERNAME=your-docker-username
# DOCKER_TOKEN=dckr_pat_your-actual-token-here

# ============================================================================
# MONITORING & OBSERVABILITY - CRITICAL SECURITY
# ============================================================================

# Prometheus Configuration
PROMETHEUS_PORT=9090

# Grafana Admin Credentials
# ðŸš¨ REQUIRED: Generate strong password (20+ characters)
GRAFANA_ADMIN_PASSWORD=CHANGE_ME_TO_SECURE_PASSWORD_20_CHARS_MIN

# Jaeger Tracing
JAEGER_ENDPOINT=http://jaeger:14268/api/traces

# ============================================================================
# SECURITY & COMPLIANCE - CRITICAL SECURITY
# ============================================================================

# JWT Token Secret (for API authentication)
# ðŸš¨ REQUIRED: Generate strong secret (64+ characters)
# Example: openssl rand -base64 64
JWT_SECRET=CHANGE_ME_TO_SECURE_SECRET_64_CHARS_MIN

# Encryption Key (for data at rest encryption)
# ðŸš¨ REQUIRED: Generate strong key (64+ characters)
# Example: openssl rand -base64 64
ENCRYPTION_KEY=CHANGE_ME_TO_SECURE_KEY_64_CHARS_MIN

# ========================================
# DEVELOPMENT SETTINGS
# ========================================
RUST_LOG=info
ENVIRONMENT=development
DEBUG=true

# ========================================
# PRODUCTION OVERRIDES
# ========================================
# Uncomment and modify for production deployment
# ENVIRONMENT=production
# DEBUG=false
# RUST_LOG=warn
# REPLICAS=3

# ============================================================================
# EMAIL/SMTP CONFIGURATION (Optional - for alerts)
# ============================================================================

# SMTP_FROM=alerts@project-chimera.com
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-smtp-app-password
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587

# ============================================================================
# SECURITY BEST PRACTICES
# ============================================================================
#
# 1. Password Requirements:
#    - Minimum 32 characters for database passwords
#    - Minimum 20 characters for web UI passwords
#    - Use random generation, not memorable passphrases
#    - Include uppercase, lowercase, numbers, special chars
#
# 2. Rotation Schedule:
#    - Rotate all credentials every 90 days minimum
#    - Rotate immediately if any credential is exposed
#    - Document rotation in security audit log
#
# 3. File Permissions:
#    - chmod 600 .env (read/write for owner only)
#    - Never commit .env to version control
#    - Store backups in encrypted password manager
#
# 4. Production Deployment:
#    - Use External Secrets Operator for Kubernetes
#    - Enable encryption at rest
#    - Use TLS for all inter-service communication
#    - Implement network policies
#
# 5. Monitoring:
#    - Alert on failed authentication attempts
#    - Log all credential access (audit trail)
#    - Monitor for unusual access patterns
#    - Implement rate limiting
#
# ============================================================================
# CREDENTIAL GENERATION COMMANDS
# ============================================================================
#
# Linux/macOS:
#   openssl rand -base64 32
#   openssl rand -hex 32
#
# Windows PowerShell:
#   -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 32 | % {[char]$_})
#
# Python:
#   python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# Node.js:
#   node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
