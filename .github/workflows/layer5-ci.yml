name: Layer5 CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/layer5/**'
      - '.github/workflows/layer5-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/layer5/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "src/layer5"

    - name: Run tests
      working-directory: src/layer5
      run: cargo test --verbose

    - name: Run clippy
      working-directory: src/layer5
      run: cargo clippy -- -D warnings

    - name: Check formatting
      working-directory: src/layer5
      run: cargo fmt --check

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "src/layer5"

    - name: Build release
      working-directory: src/layer5
      run: cargo build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: layer5-binary
        path: src/layer5/target/release/chimera-layer5

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: layer5-binary
        path: src/layer5/target/release/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: src/layer5
        file: src/layer5/Dockerfile
        push: true
        tags: |
          project-chimera/layer5:latest
          project-chimera/layer5:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging Kubernetes cluster"
        # kubectl apply -f src/layer5/k8s-deployment.yaml -n staging
        # kubectl set image deployment/layer5-refinement layer5=project-chimera/layer5:${{ github.sha }} -n staging
        # kubectl rollout status deployment/layer5-refinement -n staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production Kubernetes cluster"
        # kubectl apply -f src/layer5/k8s-deployment.yaml -n production
        # kubectl set image deployment/layer5-refinement layer5=project-chimera/layer5:${{ github.sha }} -n production
        # kubectl rollout status deployment/layer5-refinement -n production