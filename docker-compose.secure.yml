# Project Chimera - Strict Security Docker Compose Configuration
#
# This configuration provides maximum security with:
# - NO exposed ports to external networks
# - Internal-only networking
# - All services isolated
# 
# Access Method:
#   Use `kubectl port-forward` or `docker exec` for admin access
#
# Usage:
#   docker-compose -f docker-compose.secure.yml up -d

version: '3.8'

services:
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --streams-max-memory 256mb --requirepass ${REDIS_PASSWORD}
    networks:
      - backend
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    networks:
      - monitoring
    # NO PORTS EXPOSED - use kubectl port-forward for access
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s

  grafana:
    image: grafana/grafana:latest
    networks:
      - monitoring
    # NO PORTS EXPOSED - use kubectl port-forward for access
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    networks:
      - monitoring
    # NO PORTS EXPOSED - use kubectl port-forward for access
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14268/api/traces"]
      interval: 30s
      timeout: 10s

  nats:
    image: nats:2-alpine
    networks:
      - backend
    # NO PORTS EXPOSED - internal only
    command: ["--jetstream", "--store_dir", "/data"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222"]
      interval: 30s
      timeout: 10s

  minio:
    image: minio/minio:latest
    networks:
      - backend
    # NO PORTS EXPOSED - use kubectl port-forward for admin
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 10s

  postgres:
    image: postgres:15-alpine
    networks:
      - backend
    # NO PORTS EXPOSED - use kubectl port-forward for access
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-chimera}
      - POSTGRES_USER=${POSTGRES_USER:-chimera}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chimera} -d ${POSTGRES_DB:-chimera}"]
      interval: 10s
      timeout: 5s

  agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    networks:
      - backend
      - monitoring
    deploy:
      replicas: 2
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-chimera}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-chimera}
      - PROMETHEUS_GATEWAY=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - AGENT_ID=${AGENT_ID:-intent_parser_v1}
      - MODEL_PATH=/models/gemma-3-270m-q4.safetensors
      - ADAPTER_PATH=/models/adapter.safetensors
      - BATCH_WINDOW_MS=${BATCH_WINDOW_MS:-15}
      - MAX_TOKENS=${MAX_TOKENS:-512}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    volumes:
      - ./models:/models:ro
    depends_on:
      - redis
      - nats
      - postgres
      - prometheus
      - jaeger
      - minio
    restart: unless-stopped

  trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile.trainer
    networks:
      - backend
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-chimera}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-chimera}
    volumes:
      - ./training_data:/data:ro
      - ./artifacts:/artifacts
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  playwright:
    image: mcr.microsoft.com/playwright:v1.40.0-jammy
    networks:
      - backend
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - AGENT_URL=http://agent:8080
    volumes:
      - ./tests/sandbox:/tests
      - /tmp/.X11-unix:/tmp/.X11-unix
    working_dir: /tests
    command: npx playwright test --grep "sandbox"

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:
  postgres_data:

networks:
  # Backend network - FULLY INTERNAL (no external access)
  backend:
    name: chimera-backend-secure
    driver: bridge
    internal: true  # Strict isolation - no internet access
  
  # Monitoring network - FULLY INTERNAL
  monitoring:
    name: chimera-monitoring-secure
    driver: bridge
    internal: true  # Strict isolation

# Access Instructions:
# 
# To access services for administration:
#
# 1. Grafana Dashboard:
#    kubectl port-forward svc/grafana 3000:3000 -n chimera
#    http://localhost:3000
#
# 2. Prometheus:
#    kubectl port-forward svc/prometheus 9090:9090 -n chimera
#    http://localhost:9090
#
# 3. PostgreSQL:
#    kubectl port-forward svc/postgres 5432:5432 -n chimera
#    psql -h localhost -U chimera -d chimera
#
# 4. MinIO Console:
#    kubectl port-forward svc/minio 9001:9001 -n chimera
#    http://localhost:9001
#
# 5. Redis CLI:
#    kubectl exec -it svc/redis -n chimera -- redis-cli -a $REDIS_PASSWORD
