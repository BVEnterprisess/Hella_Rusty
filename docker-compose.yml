version: '3.8'

services:
  # Redis for message queuing and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --streams-max-memory 256mb --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - chimera-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.listen-address=0.0.0.0:9090'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
    networks:
      - chimera-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_HTTP_PORT=3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - chimera-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14268/api/traces"]
      interval: 30s
      timeout: 10s
    networks:
      - chimera-network

  # NATS for message queuing (alternative to Redis Streams)
  nats:
    image: nats:2-alpine
    command: ["--jetstream", "--store_dir", "/data"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222"]
      interval: 30s
      timeout: 10s
    networks:
      - chimera-network

  # MinIO for artifact storage (S3-compatible)
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 10s
    networks:
      - chimera-network

  # PostgreSQL for metadata and job state
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
    networks:
      - chimera-network

  # Agent service (can be scaled)
  agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    deploy:
      replicas: 2
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PROMETHEUS_GATEWAY=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - AGENT_ID=${AGENT_ID}
      - MODEL_PATH=/models/gemma-3-270m-q4.safetensors
      - ADAPTER_PATH=/models/adapter.safetensors
      - BATCH_WINDOW_MS=${BATCH_WINDOW_MS}
      - MAX_TOKENS=${MAX_TOKENS}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
    volumes:
      - ./models:/models:ro
    depends_on:
      - redis
      - nats
      - postgres
      - prometheus
      - jaeger
      - minio
    restart: unless-stopped
    networks:
      - chimera-network

  # Training service for LoRA/QLoRA
  trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile.trainer
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./training_data:/data:ro
      - ./artifacts:/artifacts
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - chimera-network

  # Layer 1 Discovery service
  discovery:
    build:
      context: .
      dockerfile: docker/Dockerfile.discovery
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PROMETHEUS_GATEWAY=http://prometheus:9090
      - SCAN_INTERVAL=${SCAN_INTERVAL}
      - DATA_RETENTION_HOURS=${DATA_RETENTION_HOURS}
      - ENABLE_SYSTEM_PROBES=${ENABLE_SYSTEM_PROBES}
      - ENABLE_NETWORK_PROBES=${ENABLE_NETWORK_PROBES}
      - ENABLE_CONTAINER_PROBES=${ENABLE_CONTAINER_PROBES}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - discovery_data:/app/data
      - discovery_logs:/app/logs
    depends_on:
      - redis
      - nats
      - postgres
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chimera-network

  # Layer 6 Evolution service
  evolution:
    build:
      context: .
      dockerfile: docker/Dockerfile.evolution
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PROMETHEUS_GATEWAY=http://prometheus:9090
      - POPULATION_SIZE=${POPULATION_SIZE}
      - MAX_GENERATIONS=${MAX_GENERATIONS}
      - MUTATION_RATE=${MUTATION_RATE}
      - CROSSOVER_RATE=${CROSSOVER_RATE}
      - ALGORITHM_SELECTION_INTERVAL=${ALGORITHM_SELECTION_INTERVAL}
      - ENABLE_META_LEARNING=${ENABLE_META_LEARNING}
      - ENABLE_POPULATION_DYNAMICS=${ENABLE_POPULATION_DYNAMICS}
      - ENABLE_FITNESS_LANDSCAPE=${ENABLE_FITNESS_LANDSCAPE}
      - RUST_LOG=${RUST_LOG}
    volumes:
      - evolution_populations:/app/populations
      - evolution_algorithms:/app/algorithms
      - evolution_logs:/app/logs
    depends_on:
      - redis
      - nats
      - postgres
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chimera-network

  # Playwright sandbox for testing
  playwright:
    image: mcr.microsoft.com/playwright:v1.40.0-jammy
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - AGENT_URL=http://agent:8080
    volumes:
      - ./tests/sandbox:/tests
      - /tmp/.X11-unix:/tmp/.X11-unix
    working_dir: /tests
    command: npx playwright test --grep "sandbox"
    networks:
      - chimera-network

volumes:
    redis_data:
    prometheus_data:
    grafana_data:
    minio_data:
    postgres_data:
    discovery_data:
    discovery_logs:
    evolution_populations:
    evolution_algorithms:
    evolution_logs:

networks:
  default:
    name: chimera-network