apiVersion: apps/v1
kind: Deployment
metadata:
  name: chimera-evolution
  labels:
    app: chimera-evolution
    component: evolution-service
    layer: "6"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chimera-evolution
  template:
    metadata:
      labels:
        app: chimera-evolution
        component: evolution-service
        layer: "6"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: evolution
        image: project-chimera/evolution:latest
        ports:
        - containerPort: 8082
          name: http
        - containerPort: 8082
          name: metrics
        env:
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: NATS_URL
          value: "nats://nats-service:4222"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: chimera-secrets
              key: postgres-url
        - name: POPULATION_SIZE
          value: "100"
        - name: MAX_GENERATIONS
          value: "1000"
        - name: MUTATION_RATE
          value: "0.1"
        - name: CROSSOVER_RATE
          value: "0.8"
        - name: ALGORITHM_SELECTION_INTERVAL
          value: "50"
        - name: ENABLE_META_LEARNING
          value: "true"
        - name: ENABLE_POPULATION_DYNAMICS
          value: "true"
        - name: ENABLE_FITNESS_LANDSCAPE
          value: "true"
        - name: RUST_LOG
          value: "info"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: evolution-populations
          mountPath: /app/populations
        - name: evolution-algorithms
          mountPath: /app/algorithms
        - name: evolution-logs
          mountPath: /app/logs
      volumes:
      - name: evolution-populations
        emptyDir: {}
      - name: evolution-algorithms
        emptyDir: {}
      - name: evolution-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: chimera-evolution-service
  labels:
    app: chimera-evolution
    component: evolution-service
spec:
  selector:
    app: chimera-evolution
  ports:
  - name: http
    port: 80
    targetPort: 8082
  - name: metrics
    port: 9092
    targetPort: 8082
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chimera-evolution-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "20"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  rules:
  - host: evolution.chimera.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chimera-evolution-service
            port:
              number: 80

---
apiVersion: v1
kind: NetworkPolicy
metadata:
  name: chimera-evolution-netpol
spec:
  podSelector:
    matchLabels:
      app: chimera-evolution
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: chimera-system
    - podSelector:
        matchLabels:
          layer: "7"  # Allow Layer 7 (Evolution) access
    ports:
    - protocol: TCP
      port: 8082
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis-service
    - podSelector:
        matchLabels:
          app: nats-service
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP