apiVersion: apps/v1
kind: Deployment
metadata:
  name: layer7-evolution
  namespace: project-chimera
  labels:
    app: layer7
    component: evolution
spec:
  replicas: 2
  selector:
    matchLabels:
      app: layer7
      component: evolution
  template:
    metadata:
      labels:
        app: layer7
        component: evolution
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: layer7-evolution
        image: project-chimera/layer7:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: health
        - containerPort: 9090
          name: metrics
        env:
        - name: RUST_LOG
          value: "info"
        - name: LAYER5_API_URL
          valueFrom:
            configMapKeyRef:
              name: layer7-config
              key: layer5-api-url
        - name: LAYER4_API_URL
          valueFrom:
            configMapKeyRef:
              name: layer7-config
              key: layer4-api-url
        - name: LAYER8_API_URL
          valueFrom:
            configMapKeyRef:
              name: layer7-config
              key: layer8-api-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: layer7-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: layer7-secrets
              key: redis-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
        - name: logs-volume
          mountPath: /app/logs
        - name: genome-storage
          mountPath: /app/genomes
      volumes:
      - name: config-volume
        configMap:
          name: layer7-config
      - name: logs-volume
        emptyDir: {}
      - name: genome-storage
        persistentVolumeClaim:
          claimName: layer7-genome-storage-pvc
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - layer7
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: layer7-evolution-service
  namespace: project-chimera
  labels:
    app: layer7
    component: evolution
spec:
  selector:
    app: layer7
    component: evolution
  ports:
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: layer7-config
  namespace: project-chimera
data:
  layer5-api-url: "http://layer5-service:8080"
  layer4-api-url: "http://layer4-service:8080"
  layer8-api-url: "http://layer8-service:8080"
  log-level: "info"
  evolution-schedule: "*/30 * * * *"
  population-size: "50"
  max-generations: "100"
  convergence-threshold: "0.95"

---
apiVersion: v1
kind: Secret
metadata:
  name: layer7-secrets
  namespace: project-chimera
type: Opaque
data:
  database-url: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQGxh eWVyNy1kYtiYWZ1c2U6NTQzMi9ldm9sdXRpb24=  # postgres://user:password@layer7-database:5432/evolution (base64)
  redis-url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzk=  # redis://redis-service:6379 (base64)

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: layer7-genome-storage-pvc
  namespace: project-chimera
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: "fast-ssd"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: layer7-network-policy
  namespace: project-chimera
spec:
  podSelector:
    matchLabels:
      app: layer7
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: layer5
    - podSelector:
        matchLabels:
          app: layer4
    - podSelector:
        matchLabels:
          app: layer8
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: layer5
    - podSelector:
        matchLabels:
          app: layer4
    - podSelector:
        matchLabels:
          app: layer8
    - podSelector:
        matchLabels:
          app: postgres
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP